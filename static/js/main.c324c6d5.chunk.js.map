{"version":3,"sources":["Projects.tsx","Contact.tsx","Splash.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Portfolio","react_default","a","createElement","className","Component","Contact","Splash","App","es","style","float","to","Splash_Splash","path","Projects_Portfolio","Contact_Contact","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wSAIqBA,0LAEb,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAf,+CAEIH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mBAEjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAf,+CAEIH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mBAEjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAf,+CAEIH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,2BAdMC,cCDlBC,mLAEb,OACIL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,oCAEIF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,2BANIC,aCChBE,mLAEb,OACIN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,yDAEIF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,2BANGC,aCIfG,mLAEb,OACIP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAMC,MAAO,CAACC,MAAO,QAASC,GAAG,KAAjC,gBACAX,EAAAC,EAAAC,cAAA,OAAKO,MAAO,CAACC,MAAO,UAChBV,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAMG,GAAG,YAAT,YAAoC,KACpCX,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAMG,GAAG,WAAT,WAAkC,OAG1CX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACIR,EAAAC,EAAAC,cAACU,EAAD,CAAQC,KAAK,MACbb,EAAAC,EAAAC,cAACY,EAAD,CAAUD,KAAK,cACfb,EAAAC,EAAAC,cAACa,EAAD,CAASF,KAAK,uBAfLT,aCIbY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c324c6d5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Projects.css';\nimport { RouteComponentProps } from '@reach/router';\n\nexport default class Portfolio extends Component<RouteComponentProps> {\n    render() {\n        return (\n            <div className=\"box\">\n                <div className=\"box, card\">\n                    Hi, my name is Isabel Casal.&nbsp;&nbsp;&nbsp;&nbsp;\n                    <i className=\"fas fa-rocket\"/>\n                </div>\n                <div className=\"box, card\">\n                    Hi, my name is Isabel Casal.&nbsp;&nbsp;&nbsp;&nbsp;\n                    <i className=\"fas fa-rocket\"/>\n                </div>\n                <div className=\"box, card\">\n                    Hi, my name is Isabel Casal.&nbsp;&nbsp;&nbsp;&nbsp;\n                    <i className=\"fas fa-rocket\"/>\n                </div>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport { RouteComponentProps } from '@reach/router';\n\nexport default class Contact extends Component<RouteComponentProps> {\n    render() {\n        return (\n            <div className=\"box\">\n                <h3>\n                    info@isabelcasal.design\n                    <i className=\"fas fa-rocket\"/>\n                </h3>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport { RouteComponentProps } from '@reach/router';\n\n\nexport default class Splash extends Component<RouteComponentProps> {\n    render() {\n        return (\n            <div className=\"box\">\n                <h3>\n                    Hi, my name is Isabel Casal.&nbsp;&nbsp;&nbsp;&nbsp;\n                    <i className=\"fas fa-rocket\"/>\n                </h3>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport 'bulma/css/bulma.css';\nimport { Router, Link } from \"@reach/router\"\nimport Projects from './Projects';\nimport Contact from './Contact';\nimport Splash from './Splash';\n\nexport default class App extends Component {\n    render() {\n        return (\n            <div className=\"app, box\">\n                <div className=\"nav, box\">\n                    <Link style={{float: 'left'}} to=\"/\">Isabel Casal</Link>\n                    <nav style={{float: 'right'}}>\n                        <Link to=\"projects\">projects</Link>{'\\t'}\n                        <Link to=\"contact\">contact</Link>{'\\t'}\n                    </nav>\n                </div>\n                <div className=\"body, box\">\n                    <Router>\n                        <Splash path=\"/\" />\n                        <Projects path=\"/projects\"/>\n                        <Contact path=\"/contact\"/>\n                    </Router>\n                </div>\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config: any) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: any, config: any) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: any, config: any) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}